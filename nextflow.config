/*
 * -------------------------------------------------
 *  nf-core/mhcquant Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

// Global default params, used in configs
params {

  container = 'nfcore/mhcquant:1.0.0' // Container slug. Stable releases should specify release tag!

  help = false
  mzmls = false
  mzmls_folder = false
  mzmls_extension = "mzML"
  fasta = "data/*.fasta"
  outdir = './results'
  clusterOptions = false
  awsqueue = false
  awsregion = 'eu-west-1'
  fragment_mass_tolerance = 0.02
  precursor_mass_tolerance = 5
  fragment_bin_offset = 0
  fdr_threshold = 0.01
  fdr_level = 'peptide-level-fdrs'
  number_mods = 3
  num_hits = 1
  digest_mass_range = "800:2500"
  pick_ms_levels = 2
  centroided = "False"
  prec_charge = '2:3'
  activation_method = 'ALL'
  enzyme = 'unspecific cleavage'
  fixed_mods = ''
  variable_mods = 'Oxidation (M)'
  tracedir = "${params.outdir}/pipeline_info"
}

// enable docker
docker.enabled = true
process.container = params.container
docker.temp = 'auto'
env {
  JOBLIB_TEMP_FOLDER="/tmp"
}


profiles {
  conda { process.conda = "$baseDir/environment.yml" }
  docker {
    docker.enabled = true
    process.container = params.container
    docker.temp = 'auto'
    env {
      JOBLIB_TEMP_FOLDER="/tmp"
    }
  }
  singularity {
    singularity.enabled = true
    process.container = {"shub://${params.container.replace('nfcore', 'nf-core')}"}
  }
  standard {
    includeConfig 'conf/base.config'
  }
  awsbatch {
    includeConfig 'conf/base.config'
    includeConfig 'conf/awsbatch.config'
  }
  binac {
    includeConfig 'conf/base.config'
    includeConfig 'conf/binac.config'
  }
  uzh {
    includeConfig 'conf/base.config'
    includeConfig 'conf/uzh.config'
  }
  cfc {
    includeConfig 'conf/base.config'
    includeConfig 'conf/cfc.config'
  }
  test {
    includeConfig 'conf/base.config'
    includeConfig 'conf/test.config'
  }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  none {
    // Don't load any config (for use with custom home configs)
  }
}


// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/nf-core/mhcquant_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/nf-core/mhcquant_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/nf-core/mhcquant_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/nf-core/mhcquant_dag.svg"
}

manifest {
  name = 'nf-core/mhcquant'
  author = 'Leon Bichmann'
  homePage = 'https://github.com/nf-core/mhcquant'
  description = 'Identify and quantify peptides from mass spectrometry raw data'
  mainScript = 'main.nf'
  nextflowVersion = '>=0.32.0'
  version = '1.0.0'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
